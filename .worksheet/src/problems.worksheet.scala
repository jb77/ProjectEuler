package problems

object worksheet {;import org.scalaide.worksheet.runtime.library.WorksheetSupport._; def main(args: Array[String])=$execute{;$skip(658); 

/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
  1: 1
  3: 1,3
  6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
*/

def nthTriangleNumber(n:Int):Int ={
	//1.to(n).sum
	// faster is:
	( n*(n+1) ) / 2
};System.out.println("""nthTriangleNumber: (n: Int)Int""");$skip(23); val res$0 = 

nthTriangleNumber(50);System.out.println("""res0: Int = """ + $show(res$0));$skip(378); 

def countDivisors( x:Int):Int= {
    var limit = x;
    var numberOfDivisors = 0;

    for (i<-1.to(limit)) {
    		//println(x,i,limit)
        if (x % i == 0) {
            limit = x / i;
            if (limit != i) {
                numberOfDivisors=numberOfDivisors+1
            }
            numberOfDivisors=numberOfDivisors+1
        }
    }

    numberOfDivisors /2
};System.out.println("""countDivisors: (x: Int)Int""");$skip(34); 

println(countDivisors(76576500));$skip(20); 

 val candidate=2^3


import scala.math._;System.out.println("""candidate  : Int = """ + $show(candidate ));$skip(70); 
val dn=pow(2, 4) * pow(3,4) * pow(5,4) * 7 * 11;System.out.println("""dn  : Double = """ + $show(dn ));$skip(16); 
val n=dn.toLong;System.out.println("""n  : Long = """ + $show(n ));$skip(23); val res$1 = 
countDivisors(n.toInt);System.out.println("""res1: Int = """ + $show(res$1));$skip(5); val res$2 = 

n*2;System.out.println("""res2: Long = """ + $show(res$2));$skip(16); 

 
var trgNum=0;System.out.println("""trgNum  : Int = """ + $show(trgNum ));$skip(108); 
for(i<-11168.to(12000)) //too slow to call repeatedly (esp for big numbers)
{
 	trgNum=nthTriangleNumber(i)}
	//val cnt=countDivisors(trgNum)
	//println(trgNum,cnt)
	//if(cnt>300)	println(trgNum,cnt)
}
                                                   
 
                                                  

 
}